Linux USB Device Support Directions and Status			Stuart Lynne
Lineo						Fri Aug 24 00:06:57 PDT 2001 


1. Architecture
***************

The USB Device support maps into the USB Host support in the following manner.


                 USB Host                      USB Device
    ----------------------+                  +---------------------------
             Class driver | <-- logical  --> | Functions driver
    ----------------------|                  |---------------------------
               Core layer |                  | Core layer
    ----------------------|                  |---------------------------
    Host interface driver | <-- physical --> | Bus interface driver
    ----------------------+                  +---------------------------



2. USB Device Function Drivers
******************************

    net_fd
    serial_fd
    mass_fd (planned)


Network Function - net_fd
*************************

The Network Function creates an style network interface that will bridge
802.3 (ethernet) frames between the USB Device and USB Host.

There are three configurations implemented or planned. Each configuration is
designed to work with a specific USB Host Class driver. 

    Configuration	Host		OS		Vendor
    Safe		safe_net 	Linux		Lineo 
    CDC			CDC 		Windows		MCCI
    RNDIS (planned)	RNDIS 		Windows 	Microsoft


The Safe configuration has a single interface that uses two BULK endpoints
to transfer the 802.3 frames protected with a 32bit CRC. This is compatible
with the Lineo safe_net USB Host Class network driver.

The CDC configuration is designed to work with the MCCI Windows driver.
The CDC configuration has two configurations that are compatible with the
CDC standard. This configuration can optionally use a 32bit CRC. 

The planned RNDIS configuration will be compatible with Microsoft's RNDIS
Windows driver.


Serial Function - serial_fd
***************************

The Serial Function creates a character device capable of carrying serial
data.

Currently there are two configurations implemented or planned. 

    Configuration	Host		OS		Vendor
    Safe		safe_serial	Linux		Lineo
    ACM (planned)	acm		Linux		GPL


Mass Storage - mass_fd
**********************

The Mass Storage Function will implement a standard USB Mass Storage device.



3. Bus Interface Drivers
************************

    sa1100_bi
    l7205_bi
    sl11_bi
    hitachi_bi
    insilicon_bi


StrongArm SA-1110 - sa1100_bi
*****************************

The StrongArm SA-1110 Bus interface is an integral component of the SA-1100.

It is a minimal implementation that supports only three fixed endpoints:

    Endpoint	Size	Purpose
    0		8	control
    1		256	bulk out (receive)
    2		256	bulk in (transmit)

There are several problems both with the design of the UDC and the
implementation. For example:

    - reads/writes to UDC registers may be ignored
    - extended control data reads fail
    - use of DMA causes USB address register to randomly change
    - use of DMA can cause unexpected STALLs on transmit
    - use of larger than 64 byte packets is not stable

Even though this device supports USB packets larger than 64 bytes it has
proved impossible to create a stable driver that supports anything larger
than 64 bytes. This is the default configuration:

    Endpoint	Size	Purpose
    0		8	control
    1		64	bulk out (receive)
    2		64	bulk in (transmit)

Some of the above problems are more noticeable with lower speed parts
(133Mhz parts for example). It is specifically recommended that on lower
speed parts the function drivers be configured to use reduced maximum
USB packet sizes so that DMA is not used. This means that the following
maximum USB packet sizes would be used:

    Endpoint	Size	Purpose
    0		8	control
    1		20	bulk out (receive)
    2		16	bulk in (transmit)

The problems with ignored reads and writes makes it impossible to guarantee
accurate data transfer for both send and receive. This means that the safe
versions of any function drivers must be used (i.e. CRC checked).

Even though this device supports USB packets larger than 64 bytes it has
proved impossible to create a stable driver that supports anything larger
than 64 bytes.

The lack of a fourth endpoint means that functions that require an INTERRUPT
endpoint can not be used (e.g. RNDIS).

Most of the other problems have been dealt with to the extent possible with
various work arounds.

There is no explicit control of the USB transceiver because this is
implemented as an external device. This means that control of the
transceiver and ability to sense bus connection is dependent on the system
design.

The current driver is stable and works well at high speeds on fast (206Mhz)
parts. On lower speed parts (133Mhz) it is stable only if the reduced
packet sizes are used.


Linkup Systems L7205/L7210 - l7205_bi
*************************************

The Linkup Systems L7205 and L7210 Bus interface is an integral component of
these chips.

This bus interface supports four fixed endpoints:

    Endpoint	Size	Purpose
    0		8	control
    1		32	bulk out (receive)
    2		32	bulk in (transmit)
    3		16	interrupt

There are several design limitations for this device:

    - maximum bulk packet size of 32 bytes
    - built in processing of endpoint zero setup 

The former limits the maximum throughput the device will achieve.

The latter makes supporting any configuration with multiple interfaces
impossible (for example CDC, RNDIS or ACM).

The L7205 and early L7210 parts have various implementation flaws:

    - memory coherency problems when writing to transmit FIFO
    - problems with full duplex operation
    - problems with DMA
    - problems transmitting or receiving short USB packets
    - problems with the existing test system design (Linkup SBC)
    - problems with the device stopping USB operations

Various work arounds are being tested. This includes adding support to the
network and serial functions to force them into padding all sent data to the
full packet size. [In fact the hardware is OK for sending packets between 29
and 32 bytes which allows the network driver to continue to use short
packets to signal the end of bulk transfers.]

Currently the driver is in flux while we wait for more suggestions from
Linkup for work arounds for the existing parts. 

We will have to do more testing when their new L7210 part is available.


ScanLogic SL11S - sl11_bi
*************************

The ScanLogic SL11S is a stand alone USB Device chip. 

This bus interface supports four fixed endpoints:

    Endpoint	Size	Purpose
    0		64	control
    1		64	bulk in, bulk out or interrupt
    2		64	bulk in, bulk out or interrupt
    3		64	bulk in, bulk out or interrupt


Because this device is external to the CPU it is accessed as a peripheral.
This means the driver must be adapted for each system that it will be used
in.

Currently we have a ScanLogic ISA prototype card that allows the use of this
chip in an Intel development system. This card works well but has some speed
limitations related to the ISA implementation.


Hitachi - hitachi_bi
********************

This bus interface supports four fixed endpoints:

    Endpoint	Size	Purpose
    0		64	control
    1		64	bulk in, bulk out or interrupt
    2		64	bulk in, bulk out or interrupt
    3		64	bulk in, bulk out or interrupt


Unfortunately this device appears to process endpoint zero setup packets. It
is unknown at this point if this will prevent operation of the device with
class drivers that require multiple interfaces (e.g. CDC, RNDIS, ACM).



Insilicon - insilicon_bi
************************

The InSilicon USB Device is a Verilog core that can be configured in various
ways. We are currently waiting for information from InSilicon that should
allow us to help suggest specific configurations to optimize performance and
use with class drivers that require multiple interfaces (e.g. CDC, RNDIS,
ACM).



4. USB Host Class Drivers
*************************

    safe_net
    safe_serial
    mcci


Safe Network - safe_net
***********************

This is Lineo's USB Host Class driver that implements a driver compatible
with the Lineo's USB Device Network Function driver. 

Specifically it is compatible with reduced endpoint implementations and
utilizes the 32bit CRC to verify all received 802.3 frames.


Safe Serial - safe_serial
*************************

This is Lineo's USB Host Class driver that implements a driver compatible
with the Lineo's USB Device Serial Function driver. It is a plug in for the
standard Linux USB serial driver.

Specifically it is compatible with reduced endpoint implementations and
utilizes a 10bit CRC to verify all received data. It can also be configured
to pad all sent data packets to the full size.


MCCI
****

MCCI has a Windows NDIS CDC network driver that they have adapted to work
Lineo's network function driver.


5. OS Supported
***************

    Linux
    ucLinux
    RTAI
    RTXC


Linux
*****

Linux 2.4 is the current reference port for the USB Device software.


ucLinux
*******

Support has been requested for ucLinux on the Hitachi SH2. This work has not
been started.


RTAI
****

No plans at this time. There should be no specific interactions between the
USB Device software and the use of RTAI. But there may be resource
starvation issues.

RTXC
****

No plans at this time. It is thought that the USB Device support could be
adapted into this OS. There would be specific changes to the top layer of
the function drivers and changes to how the drivers are loaded and
implemented. But the overall design and most of the software should be
portable with minor changes.




6. Platforms
************

Working:

    Compaq iPaq
    HP Journada X25 (aka Calypso)
    Linkup Systems SBC
    ScanLogic SL11S ISA

Planned:

    Hitachi SH2
    Hitachi SH3
    ARM/Canon/InSilicon
    Samsung/InSilicon


Compaq iPaq
***********

The iPaq is a StrongArm SA-1110 and is the reference platform for testing
that driver.


HP Journada X25 (aka Calypso)
*****************************

The Calypso is a StrongArm SA-1110. It uses the standard driver with a few
modifications to support the cradle monitor and transceiver control.

The current Calypso is a low speed part (133Mhz) and is only stable when
used with reduced USB packet sizes.


Linkup Systems SBC
******************

The Linkup Systems SBC is a reference platform from Linkup for testing their
L7205 and L7210 devices. 

The current system has some design problems that may adversely impact the
use of USB. Linkup is currently investigating this.



ScanLogic SL11S ISA
*******************

The ScanLogic SL11S ISA card is available from ScanLogic as a reference
design for the SL11S. It can be used in a standard Intel based PC to develop
software for this device.

Our SL11 driver currently works well with this device.

There are two minor problems with this design. First there is some
instability in handling interrupts. Second because the device is accessed
through the standard ISA IO ports it is impossible to run the device at full
speed. [The inb() and outb() operations take 1 microsecond to complete.
Data is received from the USB bus into the SL11 FIFO's in just under .8
microsecond.]




Hitachi Solutions Engine
************************

The Hitachi Solutions Engine series of boards implements boards that have
reference designs for each of their SH2, SH3 and SH4 CPU's.

These boards have a extendible bus that allows a daughter card to be added
for testing other devices and software.

The USB Daughter Board (MSUSBDB01E) contains an SL11S. 

Support will be developed to support this board. Initially for the SH2 and
possibly for the SH3 and SH4.

Note that the SH2 CPU has no MMU and will require drivers running under
ucLinux.


Hitachi
*******

Several of the SH2 and SH3 CPU's have a built in USB Device function:

	7626 	SH2
	7727	SH3

These appear to be the same USB device. The 7626 is an SH2 CPU so will
require support under ucLinux.


ARM/Canon/InSilicon
*******************

No data available at this time.


Samsung/InSilicon
*****************


No data available at this time.



7. Test Software
****************

    ThinLinux USB Test Suite


Thinlinux USB Test Suite
************************

For ease of testing and demonstrating the USB Device software we have a
small CD boot-able Linux system that is setup to allow testing of any device
that is using the USB Device software.

Because this runs from a RAMFS and comes pre-configured it is a fast and
reliable way to do both testing and demonstrations.


